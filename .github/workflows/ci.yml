name: CI

on:
  pull_request:
    branches: [main, 'v*.*.*']
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Get bun store directory
        id: bun-cache
        shell: bash
        run: echo "STORE_PATH=$(bun pm cache)" >> $GITHUB_OUTPUT

      - name: Setup bun cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.bun-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-bun-store-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-store-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run ESLint
        run: bun run lint

  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Get bun store directory
        id: bun-cache
        shell: bash
        run: echo "STORE_PATH=$(bun pm cache)" >> $GITHUB_OUTPUT

      - name: Setup bun cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.bun-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-bun-store-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-store-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run TypeScript type checking
        run: bun run typecheck

  test-mcp:
    name: MCP Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: memrok
          POSTGRES_PASSWORD: test-password
          POSTGRES_DB: memrok
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Get bun store directory
        id: bun-cache
        shell: bash
        run: echo "STORE_PATH=$(bun pm cache)" >> $GITHUB_OUTPUT

      - name: Setup bun cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.bun-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-bun-store-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-store-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://memrok:test-password@localhost:5432/memrok" >> .env.test
          echo "MEMROK_DB_HOST=localhost" >> .env.test
          echo "MEMROK_DB_PORT=5432" >> .env.test
          echo "MEMROK_DB_USER=memrok" >> .env.test
          echo "MEMROK_DB_PASSWORD=test-password" >> .env.test
          echo "MEMROK_DB_NAME=memrok" >> .env.test
          echo "NUXT_OIDC_SESSION_SECRET=$(openssl rand -hex 32)" >> .env.test
          echo "NUXT_OIDC_AUTH_SESSION_SECRET=$(openssl rand -hex 32)" >> .env.test
          echo "NUXT_OIDC_TOKEN_KEY=$(openssl rand -hex 16)" >> .env.test

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://memrok:test-password@localhost:5432/memrok
          MEMROK_DB_HOST: localhost
          MEMROK_DB_PORT: 5432
          MEMROK_DB_USER: memrok
          MEMROK_DB_PASSWORD: test-password
          MEMROK_DB_NAME: memrok
        run: bun run db:migrate

      - name: Run MCP tests
        env:
          DATABASE_URL: postgresql://memrok:test-password@localhost:5432/memrok
          MEMROK_DB_HOST: localhost
          MEMROK_DB_PORT: 5432
          MEMROK_DB_USER: memrok
          MEMROK_DB_PASSWORD: test-password
          MEMROK_DB_NAME: memrok
        run: bun run test:mcp

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Get bun store directory
        id: bun-cache
        shell: bash
        run: echo "STORE_PATH=$(bun pm cache)" >> $GITHUB_OUTPUT

      - name: Setup bun cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.bun-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-bun-store-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-store-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build application
        env:
          NUXT_UI_PRO_LICENSE: ${{ secrets.NUXT_UI_PRO_LICENSE }}
        run: bun run build

  # Summary job for branch protection
  ci-success:
    name: CI Success
    if: ${{ always() }}
    needs: [lint, typecheck, test-mcp, build]
    runs-on: ubuntu-latest
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.lint.result }}" != "success" ]] || \
             [[ "${{ needs.typecheck.result }}" != "success" ]] || \
             [[ "${{ needs.test-mcp.result }}" != "success" ]] || \
             [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "One or more CI checks failed"
            exit 1
          fi
          echo "All CI checks passed successfully"